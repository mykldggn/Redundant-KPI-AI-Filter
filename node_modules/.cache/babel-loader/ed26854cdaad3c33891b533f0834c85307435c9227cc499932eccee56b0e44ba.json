{"ast":null,"code":"var _jsxFileName = \"/Users/michaelduggan/KPI-AUDIT-TOOL/src/components/KPIAuditTool.js\",\n  _s = $RefreshSig$();\n// src/components/KPIAuditTool.js\nimport React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport SummaryStats from './SummaryStats';\nimport DepartmentSelector from './DepartmentSelector';\nimport RecommendedMetrics from './RecommendedMetrics';\nimport MetricsToReconsider from './MetricsToReconsider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KPIAuditTool = ({\n  uploadedFile\n}) => {\n  _s();\n  // eslint-disable-next-line no-unused-vars\n  const [metricsData, setMetricsData] = useState(null);\n  const [analysisResults, setAnalysisResults] = useState(null);\n  const [selectedDepartment, setSelectedDepartment] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [stats, setStats] = useState({\n    totalMetrics: 0,\n    vanityMetrics: 0,\n    percentVanity: 0\n  });\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        let data;\n        if (uploadedFile) {\n          // Use uploaded file\n          data = await readFileContent(uploadedFile);\n        } else {\n          // Use sample data\n          try {\n            const response = await fetch('/sample-data.csv');\n            data = await response.text();\n          } catch (error) {\n            console.error('Error loading sample data:', error);\n            // Use embedded sample data as fallback\n            data = `Department,Metric_Name,Visible_in_Dashboard,Used_in_Decision_Making,Executive_Requested,Last_Reviewed,Metric_Last_Used_For_Decision,Interpretation_Notes\nMarketing,OKR Progress,No,No,No,This week,2 weeks ago,Drives vanity OKRs\nFinance,Leads Generated,Yes,No,No,Last month,Used in QBR,Tied to real goals\nEngineering,OKR Progress,Yes,Yes,Yes,Last month,Recently,Auto-synced from tool\nMarketing,Demo Requests,No,Yes,No,Last month,2 weeks ago,Tied to real goals\nEngineering,Daily Active Users,Yes,No,No,Last quarter,Last quarter,Auto-synced from tool\nFinance,Code Commits,Yes,No,No,Unknown,Recently,Updated manually`;\n          }\n        }\n        Papa.parse(data, {\n          header: true,\n          skipEmptyLines: true,\n          complete: results => {\n            processData(results.data);\n          }\n        });\n      } catch (error) {\n        console.error('Error loading data:', error);\n        setLoading(false);\n      }\n    };\n    loadData();\n  }, [uploadedFile]);\n  const readFileContent = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = event => resolve(event.target.result);\n      reader.onerror = error => reject(error);\n      reader.readAsText(file);\n    });\n  };\n  const processData = data => {\n    setMetricsData(data);\n    const analysis = analyzeMetrics(data);\n    setAnalysisResults(analysis);\n\n    // Calculate stats\n    let totalVanityMetrics = 0;\n    let totalMetrics = data.length;\n    Object.keys(analysis).forEach(dept => {\n      totalVanityMetrics += analysis[dept].vanityMetrics.length;\n    });\n    setStats({\n      totalMetrics,\n      vanityMetrics: totalVanityMetrics,\n      percentVanity: Math.round(totalVanityMetrics / totalMetrics * 100)\n    });\n\n    // Set default selected department\n    setSelectedDepartment(Object.keys(analysis)[0]);\n    setLoading(false);\n  };\n\n  // Helper function to determine why a metric is considered a vanity metric\n  const determineVanityReason = row => {\n    var _row$Interpretation_N, _row$Interpretation_N2, _row$Interpretation_N3;\n    if (row.Visible_in_Dashboard === 'Yes' && row.Used_in_Decision_Making === 'No') {\n      return \"Visible but not used in decisions\";\n    } else if ((_row$Interpretation_N = row.Interpretation_Notes) !== null && _row$Interpretation_N !== void 0 && _row$Interpretation_N.includes('Drives vanity')) {\n      return \"Drives vanity OKRs\";\n    } else if ((_row$Interpretation_N2 = row.Interpretation_Notes) !== null && _row$Interpretation_N2 !== void 0 && _row$Interpretation_N2.includes('Used for optics only')) {\n      return \"Used for optics only\";\n    } else if ((_row$Interpretation_N3 = row.Interpretation_Notes) !== null && _row$Interpretation_N3 !== void 0 && _row$Interpretation_N3.includes('Often misinterpreted')) {\n      return \"Often misinterpreted\";\n    } else if (row.Metric_Last_Used_For_Decision === 'Never') {\n      return \"Never used for decisions\";\n    } else if (row.Last_Reviewed === 'Unknown') {\n      return \"Review status unknown\";\n    }\n    return \"Multiple issues\";\n  };\n\n  // Helper function to calculate a value score for metrics\n  const calculateValueScore = row => {\n    var _row$Interpretation_N4, _row$Interpretation_N5, _row$Interpretation_N6;\n    let score = 0;\n\n    // Decision making value\n    if (row.Used_in_Decision_Making === 'Yes') score += 3;\n\n    // Recency of use in decisions\n    if (row.Metric_Last_Used_For_Decision === 'Recently') score += 3;else if (row.Metric_Last_Used_For_Decision === '2 weeks ago') score += 2;else if (row.Metric_Last_Used_For_Decision === 'Used in QBR') score += 1;\n\n    // Recency of review\n    if (row.Last_Reviewed === 'This week') score += 2;else if (row.Last_Reviewed === 'Last month') score += 1;\n\n    // Quality of interpretation\n    if ((_row$Interpretation_N4 = row.Interpretation_Notes) !== null && _row$Interpretation_N4 !== void 0 && _row$Interpretation_N4.includes('Tied to real goals')) score += 3;\n    if ((_row$Interpretation_N5 = row.Interpretation_Notes) !== null && _row$Interpretation_N5 !== void 0 && _row$Interpretation_N5.includes('Frequently discussed')) score += 1;\n    if ((_row$Interpretation_N6 = row.Interpretation_Notes) !== null && _row$Interpretation_N6 !== void 0 && _row$Interpretation_N6.includes('Auto-synced from tool')) score += 1;\n    return score;\n  };\n\n  // Helper function to identify vanity metrics and valuable metrics\n  const analyzeMetrics = data => {\n    const results = {};\n\n    // Process metrics by department\n    data.forEach(row => {\n      var _row$Interpretation_N7, _row$Interpretation_N8, _row$Interpretation_N9;\n      if (!results[row.Department]) {\n        results[row.Department] = {\n          vanityMetrics: [],\n          valuableMetrics: [],\n          allMetrics: []\n        };\n      }\n\n      // Store all metrics\n      results[row.Department].allMetrics.push({\n        name: row.Metric_Name,\n        visible: row.Visible_in_Dashboard,\n        usedInDecision: row.Used_in_Decision_Making,\n        executiveRequested: row.Executive_Requested,\n        lastReviewed: row.Last_Reviewed,\n        lastUsed: row.Metric_Last_Used_For_Decision,\n        notes: row.Interpretation_Notes\n      });\n\n      // Identify vanity metrics (visible but not used in decisions, or with concerning notes)\n      const vanityIndicators = [row.Visible_in_Dashboard === 'Yes' && row.Used_in_Decision_Making === 'No', (_row$Interpretation_N7 = row.Interpretation_Notes) === null || _row$Interpretation_N7 === void 0 ? void 0 : _row$Interpretation_N7.includes('Drives vanity'), (_row$Interpretation_N8 = row.Interpretation_Notes) === null || _row$Interpretation_N8 === void 0 ? void 0 : _row$Interpretation_N8.includes('Used for optics only'), (_row$Interpretation_N9 = row.Interpretation_Notes) === null || _row$Interpretation_N9 === void 0 ? void 0 : _row$Interpretation_N9.includes('Often misinterpreted'), row.Metric_Last_Used_For_Decision === 'Never', row.Last_Reviewed === 'Unknown'];\n      if (vanityIndicators.some(indicator => indicator)) {\n        results[row.Department].vanityMetrics.push({\n          name: row.Metric_Name,\n          reason: determineVanityReason(row)\n        });\n      }\n\n      // Calculate value score for all metrics (not just those that meet threshold)\n      const score = calculateValueScore(row);\n\n      // Add to valuable metrics list with score\n      results[row.Department].valuableMetrics.push({\n        name: row.Metric_Name,\n        score: score\n      });\n    });\n\n    // Sort valuable metrics by score for each department\n    for (const dept in results) {\n      results[dept].valuableMetrics.sort((a, b) => b.score - a.score);\n\n      // Always take top 3 metrics regardless of threshold\n      results[dept].top3 = results[dept].valuableMetrics.slice(0, 3);\n\n      // Make sure we have 3 vanity metrics for each department\n      if (results[dept].vanityMetrics.length < 3) {\n        // Add lowest scoring metrics as \"Low business impact\" metrics if needed\n        const lowValueMetrics = [...results[dept].valuableMetrics].sort((a, b) => a.score - b.score).filter(metric => !results[dept].vanityMetrics.some(vm => vm.name === metric.name)).slice(0, 3 - results[dept].vanityMetrics.length);\n        lowValueMetrics.forEach(metric => {\n          results[dept].vanityMetrics.push({\n            name: metric.name,\n            reason: \"Low business impact\"\n          });\n        });\n      }\n    }\n    return results;\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-64\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-lg font-medium text-indigo-600\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"animate-spin -ml-1 mr-3 h-8 w-8 text-indigo-600 inline\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          fill: \"none\",\n          viewBox: \"0 0 24 24\",\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            className: \"opacity-25\",\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\",\n            stroke: \"currentColor\",\n            strokeWidth: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            className: \"opacity-75\",\n            fill: \"currentColor\",\n            d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), \"Loading KPI data...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AI-Powered KPI Audit Tool\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Identify and replace metrics that don't drive outcomes with ones that do.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SummaryStats, {\n      stats: stats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DepartmentSelector, {\n      departments: analysisResults ? Object.keys(analysisResults) : [],\n      selectedDepartment: selectedDepartment,\n      onSelectDepartment: setSelectedDepartment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), selectedDepartment && analysisResults && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"metrics-grid\",\n      children: [/*#__PURE__*/_jsxDEV(RecommendedMetrics, {\n        metrics: analysisResults[selectedDepartment].top3.slice(0, 3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MetricsToReconsider, {\n        metrics: analysisResults[selectedDepartment].vanityMetrics.slice(0, 3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n};\n_s(KPIAuditTool, \"iA1ZYsW7wZQFaaSbQviluVRQimQ=\");\n_c = KPIAuditTool;\nexport default KPIAuditTool;\nvar _c;\n$RefreshReg$(_c, \"KPIAuditTool\");","map":{"version":3,"names":["React","useState","useEffect","Papa","SummaryStats","DepartmentSelector","RecommendedMetrics","MetricsToReconsider","jsxDEV","_jsxDEV","KPIAuditTool","uploadedFile","_s","metricsData","setMetricsData","analysisResults","setAnalysisResults","selectedDepartment","setSelectedDepartment","loading","setLoading","stats","setStats","totalMetrics","vanityMetrics","percentVanity","loadData","data","readFileContent","response","fetch","text","error","console","parse","header","skipEmptyLines","complete","results","processData","file","Promise","resolve","reject","reader","FileReader","onload","event","target","result","onerror","readAsText","analysis","analyzeMetrics","totalVanityMetrics","length","Object","keys","forEach","dept","Math","round","determineVanityReason","row","_row$Interpretation_N","_row$Interpretation_N2","_row$Interpretation_N3","Visible_in_Dashboard","Used_in_Decision_Making","Interpretation_Notes","includes","Metric_Last_Used_For_Decision","Last_Reviewed","calculateValueScore","_row$Interpretation_N4","_row$Interpretation_N5","_row$Interpretation_N6","score","_row$Interpretation_N7","_row$Interpretation_N8","_row$Interpretation_N9","Department","valuableMetrics","allMetrics","push","name","Metric_Name","visible","usedInDecision","executiveRequested","Executive_Requested","lastReviewed","lastUsed","notes","vanityIndicators","some","indicator","reason","sort","a","b","top3","slice","lowValueMetrics","filter","metric","vm","className","children","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","d","departments","onSelectDepartment","metrics","_c","$RefreshReg$"],"sources":["/Users/michaelduggan/KPI-AUDIT-TOOL/src/components/KPIAuditTool.js"],"sourcesContent":["// src/components/KPIAuditTool.js\nimport React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport SummaryStats from './SummaryStats';\nimport DepartmentSelector from './DepartmentSelector';\nimport RecommendedMetrics from './RecommendedMetrics';\nimport MetricsToReconsider from './MetricsToReconsider';\n\nconst KPIAuditTool = ({ uploadedFile }) => {\n  // eslint-disable-next-line no-unused-vars\n  const [metricsData, setMetricsData] = useState(null);\n  const [analysisResults, setAnalysisResults] = useState(null);\n  const [selectedDepartment, setSelectedDepartment] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [stats, setStats] = useState({\n    totalMetrics: 0,\n    vanityMetrics: 0,\n    percentVanity: 0\n  });\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        let data;\n        \n        if (uploadedFile) {\n          // Use uploaded file\n          data = await readFileContent(uploadedFile);\n        } else {\n          // Use sample data\n          try {\n            const response = await fetch('/sample-data.csv');\n            data = await response.text();\n          } catch (error) {\n            console.error('Error loading sample data:', error);\n            // Use embedded sample data as fallback\n            data = `Department,Metric_Name,Visible_in_Dashboard,Used_in_Decision_Making,Executive_Requested,Last_Reviewed,Metric_Last_Used_For_Decision,Interpretation_Notes\nMarketing,OKR Progress,No,No,No,This week,2 weeks ago,Drives vanity OKRs\nFinance,Leads Generated,Yes,No,No,Last month,Used in QBR,Tied to real goals\nEngineering,OKR Progress,Yes,Yes,Yes,Last month,Recently,Auto-synced from tool\nMarketing,Demo Requests,No,Yes,No,Last month,2 weeks ago,Tied to real goals\nEngineering,Daily Active Users,Yes,No,No,Last quarter,Last quarter,Auto-synced from tool\nFinance,Code Commits,Yes,No,No,Unknown,Recently,Updated manually`;\n          }\n        }\n        \n        Papa.parse(data, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (results) => {\n            processData(results.data);\n          }\n        });\n      } catch (error) {\n        console.error('Error loading data:', error);\n        setLoading(false);\n      }\n    };\n    \n    loadData();\n  }, [uploadedFile]);\n\n  const readFileContent = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = (error) => reject(error);\n      reader.readAsText(file);\n    });\n  };\n\n  const processData = (data) => {\n    setMetricsData(data);\n    const analysis = analyzeMetrics(data);\n    setAnalysisResults(analysis);\n    \n    // Calculate stats\n    let totalVanityMetrics = 0;\n    let totalMetrics = data.length;\n    \n    Object.keys(analysis).forEach(dept => {\n      totalVanityMetrics += analysis[dept].vanityMetrics.length;\n    });\n    \n    setStats({\n      totalMetrics,\n      vanityMetrics: totalVanityMetrics,\n      percentVanity: Math.round((totalVanityMetrics / totalMetrics) * 100)\n    });\n    \n    // Set default selected department\n    setSelectedDepartment(Object.keys(analysis)[0]);\n    setLoading(false);\n  };\n\n  // Helper function to determine why a metric is considered a vanity metric\n  const determineVanityReason = (row) => {\n    if (row.Visible_in_Dashboard === 'Yes' && row.Used_in_Decision_Making === 'No') {\n      return \"Visible but not used in decisions\";\n    } else if (row.Interpretation_Notes?.includes('Drives vanity')) {\n      return \"Drives vanity OKRs\";\n    } else if (row.Interpretation_Notes?.includes('Used for optics only')) {\n      return \"Used for optics only\";\n    } else if (row.Interpretation_Notes?.includes('Often misinterpreted')) {\n      return \"Often misinterpreted\";\n    } else if (row.Metric_Last_Used_For_Decision === 'Never') {\n      return \"Never used for decisions\";\n    } else if (row.Last_Reviewed === 'Unknown') {\n      return \"Review status unknown\";\n    }\n    return \"Multiple issues\";\n  };\n\n  // Helper function to calculate a value score for metrics\n  const calculateValueScore = (row) => {\n    let score = 0;\n    \n    // Decision making value\n    if (row.Used_in_Decision_Making === 'Yes') score += 3;\n    \n    // Recency of use in decisions\n    if (row.Metric_Last_Used_For_Decision === 'Recently') score += 3;\n    else if (row.Metric_Last_Used_For_Decision === '2 weeks ago') score += 2;\n    else if (row.Metric_Last_Used_For_Decision === 'Used in QBR') score += 1;\n    \n    // Recency of review\n    if (row.Last_Reviewed === 'This week') score += 2;\n    else if (row.Last_Reviewed === 'Last month') score += 1;\n    \n    // Quality of interpretation\n    if (row.Interpretation_Notes?.includes('Tied to real goals')) score += 3;\n    if (row.Interpretation_Notes?.includes('Frequently discussed')) score += 1;\n    if (row.Interpretation_Notes?.includes('Auto-synced from tool')) score += 1;\n    \n    return score;\n  };\n\n  // Helper function to identify vanity metrics and valuable metrics\n  const analyzeMetrics = (data) => {\n    const results = {};\n    \n    // Process metrics by department\n    data.forEach(row => {\n      if (!results[row.Department]) {\n        results[row.Department] = {\n          vanityMetrics: [],\n          valuableMetrics: [],\n          allMetrics: []\n        };\n      }\n      \n      // Store all metrics\n      results[row.Department].allMetrics.push({\n        name: row.Metric_Name,\n        visible: row.Visible_in_Dashboard,\n        usedInDecision: row.Used_in_Decision_Making,\n        executiveRequested: row.Executive_Requested,\n        lastReviewed: row.Last_Reviewed,\n        lastUsed: row.Metric_Last_Used_For_Decision,\n        notes: row.Interpretation_Notes\n      });\n      \n      // Identify vanity metrics (visible but not used in decisions, or with concerning notes)\n      const vanityIndicators = [\n        row.Visible_in_Dashboard === 'Yes' && row.Used_in_Decision_Making === 'No',\n        row.Interpretation_Notes?.includes('Drives vanity'),\n        row.Interpretation_Notes?.includes('Used for optics only'),\n        row.Interpretation_Notes?.includes('Often misinterpreted'),\n        row.Metric_Last_Used_For_Decision === 'Never',\n        row.Last_Reviewed === 'Unknown'\n      ];\n      \n      if (vanityIndicators.some(indicator => indicator)) {\n        results[row.Department].vanityMetrics.push({\n          name: row.Metric_Name,\n          reason: determineVanityReason(row)\n        });\n      }\n      \n      // Calculate value score for all metrics (not just those that meet threshold)\n      const score = calculateValueScore(row);\n      \n      // Add to valuable metrics list with score\n      results[row.Department].valuableMetrics.push({\n        name: row.Metric_Name,\n        score: score\n      });\n    });\n    \n    // Sort valuable metrics by score for each department\n    for (const dept in results) {\n      results[dept].valuableMetrics.sort((a, b) => b.score - a.score);\n      \n      // Always take top 3 metrics regardless of threshold\n      results[dept].top3 = results[dept].valuableMetrics.slice(0, 3);\n      \n      // Make sure we have 3 vanity metrics for each department\n      if (results[dept].vanityMetrics.length < 3) {\n        // Add lowest scoring metrics as \"Low business impact\" metrics if needed\n        const lowValueMetrics = [...results[dept].valuableMetrics]\n          .sort((a, b) => a.score - b.score)\n          .filter(metric => \n            !results[dept].vanityMetrics.some(vm => vm.name === metric.name)\n          )\n          .slice(0, 3 - results[dept].vanityMetrics.length);\n        \n        lowValueMetrics.forEach(metric => {\n          results[dept].vanityMetrics.push({\n            name: metric.name,\n            reason: \"Low business impact\"\n          });\n        });\n      }\n    }\n    \n    return results;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"text-lg font-medium text-indigo-600\">\n          <svg className=\"animate-spin -ml-1 mr-3 h-8 w-8 text-indigo-600 inline\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n          </svg>\n          Loading KPI data...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dashboard\">\n      <h1>AI-Powered KPI Audit Tool</h1>\n      <p>Identify and replace metrics that don't drive outcomes with ones that do.</p>\n      \n      <SummaryStats stats={stats} />\n\n      <DepartmentSelector \n        departments={analysisResults ? Object.keys(analysisResults) : []}\n        selectedDepartment={selectedDepartment}\n        onSelectDepartment={setSelectedDepartment}\n      />\n\n      {selectedDepartment && analysisResults && (\n        <div className=\"metrics-grid\">\n          <RecommendedMetrics \n            metrics={analysisResults[selectedDepartment].top3.slice(0, 3)} \n          />\n          \n          <MetricsToReconsider \n            metrics={analysisResults[selectedDepartment].vanityMetrics.slice(0, 3)} \n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default KPIAuditTool;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
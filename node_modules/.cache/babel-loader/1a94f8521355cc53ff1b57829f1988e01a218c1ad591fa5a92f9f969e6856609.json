{"ast":null,"code":"// Helper function to determine why a metric is considered a vanity metric\nexport const determineVanityReason = row => {\n  var _row$Interpretation_N, _row$Interpretation_N2, _row$Interpretation_N3;\n  if (row.Visible_in_Dashboard === 'Yes' && row.Used_in_Decision_Making === 'No') {\n    return \"Visible but not used in decisions\";\n  } else if ((_row$Interpretation_N = row.Interpretation_Notes) !== null && _row$Interpretation_N !== void 0 && _row$Interpretation_N.includes('Drives vanity')) {\n    return \"Drives vanity OKRs\";\n  } else if ((_row$Interpretation_N2 = row.Interpretation_Notes) !== null && _row$Interpretation_N2 !== void 0 && _row$Interpretation_N2.includes('Used for optics only')) {\n    return \"Used for optics only\";\n  } else if ((_row$Interpretation_N3 = row.Interpretation_Notes) !== null && _row$Interpretation_N3 !== void 0 && _row$Interpretation_N3.includes('Often misinterpreted')) {\n    return \"Often misinterpreted\";\n  } else if (row.Metric_Last_Used_For_Decision === 'Never') {\n    return \"Never used for decisions\";\n  } else if (row.Last_Reviewed === 'Unknown') {\n    return \"Review status unknown\";\n  }\n  return \"Multiple issues\";\n};\n\n// Helper function to calculate a value score for metrics\nexport const calculateValueScore = row => {\n  var _row$Interpretation_N4, _row$Interpretation_N5, _row$Interpretation_N6;\n  let score = 0;\n\n  // Decision making value\n  if (row.Used_in_Decision_Making === 'Yes') score += 3;\n\n  // Recency of use in decisions\n  if (row.Metric_Last_Used_For_Decision === 'Recently') score += 3;else if (row.Metric_Last_Used_For_Decision === '2 weeks ago') score += 2;else if (row.Metric_Last_Used_For_Decision === 'Used in QBR') score += 1;\n\n  // Recency of review\n  if (row.Last_Reviewed === 'This week') score += 2;else if (row.Last_Reviewed === 'Last month') score += 1;\n\n  // Quality of interpretation\n  if ((_row$Interpretation_N4 = row.Interpretation_Notes) !== null && _row$Interpretation_N4 !== void 0 && _row$Interpretation_N4.includes('Tied to real goals')) score += 3;\n  if ((_row$Interpretation_N5 = row.Interpretation_Notes) !== null && _row$Interpretation_N5 !== void 0 && _row$Interpretation_N5.includes('Frequently discussed')) score += 1;\n  if ((_row$Interpretation_N6 = row.Interpretation_Notes) !== null && _row$Interpretation_N6 !== void 0 && _row$Interpretation_N6.includes('Auto-synced from tool')) score += 1;\n  return score;\n};\n\n// Helper function to identify vanity metrics and valuable metrics\nexport const analyzeMetrics = data => {\n  const results = {};\n\n  // Process metrics by department\n  data.forEach(row => {\n    var _row$Interpretation_N7, _row$Interpretation_N8, _row$Interpretation_N9;\n    if (!results[row.Department]) {\n      results[row.Department] = {\n        vanityMetrics: [],\n        valuableMetrics: [],\n        allMetrics: []\n      };\n    }\n\n    // Store all metrics\n    results[row.Department].allMetrics.push({\n      name: row.Metric_Name,\n      visible: row.Visible_in_Dashboard,\n      usedInDecision: row.Used_in_Decision_Making,\n      executiveRequested: row.Executive_Requested,\n      lastReviewed: row.Last_Reviewed,\n      lastUsed: row.Metric_Last_Used_For_Decision,\n      notes: row.Interpretation_Notes\n    });\n\n    // Identify vanity metrics (visible but not used in decisions, or with concerning notes)\n    const vanityIndicators = [row.Visible_in_Dashboard === 'Yes' && row.Used_in_Decision_Making === 'No', (_row$Interpretation_N7 = row.Interpretation_Notes) === null || _row$Interpretation_N7 === void 0 ? void 0 : _row$Interpretation_N7.includes('Drives vanity'), (_row$Interpretation_N8 = row.Interpretation_Notes) === null || _row$Interpretation_N8 === void 0 ? void 0 : _row$Interpretation_N8.includes('Used for optics only'), (_row$Interpretation_N9 = row.Interpretation_Notes) === null || _row$Interpretation_N9 === void 0 ? void 0 : _row$Interpretation_N9.includes('Often misinterpreted'), row.Metric_Last_Used_For_Decision === 'Never', row.Last_Reviewed === 'Unknown'];\n    if (vanityIndicators.some(indicator => indicator)) {\n      results[row.Department].vanityMetrics.push({\n        name: row.Metric_Name,\n        reason: determineVanityReason(row)\n      });\n    }\n\n    // Calculate value score for all metrics (not just those that meet threshold)\n    const score = calculateValueScore(row);\n\n    // Add to valuable metrics list with score\n    results[row.Department].valuableMetrics.push({\n      name: row.Metric_Name,\n      score: score\n    });\n  });\n\n  // Sort valuable metrics by score for each department\n  for (const dept in results) {\n    results[dept].valuableMetrics.sort((a, b) => b.score - a.score);\n\n    // Always take top 3 metrics regardless of threshold\n    results[dept].top3 = results[dept].valuableMetrics.slice(0, 3);\n\n    // Make sure we have 3 vanity metrics for each department\n    if (results[dept].vanityMetrics.length < 3) {\n      // Add lowest scoring metrics as \"Low business impact\" metrics if needed\n      const lowValueMetrics = [...results[dept].valuableMetrics].sort((a, b) => a.score - b.score).filter(metric => !results[dept].vanityMetrics.some(vm => vm.name === metric.name)).slice(0, 3 - results[dept].vanityMetrics.length);\n      lowValueMetrics.forEach(metric => {\n        results[dept].vanityMetrics.push({\n          name: metric.name,\n          reason: \"Low business impact\"\n        });\n      });\n    }\n  }\n  return results;\n};","map":{"version":3,"names":["determineVanityReason","row","_row$Interpretation_N","_row$Interpretation_N2","_row$Interpretation_N3","Visible_in_Dashboard","Used_in_Decision_Making","Interpretation_Notes","includes","Metric_Last_Used_For_Decision","Last_Reviewed","calculateValueScore","_row$Interpretation_N4","_row$Interpretation_N5","_row$Interpretation_N6","score","analyzeMetrics","data","results","forEach","_row$Interpretation_N7","_row$Interpretation_N8","_row$Interpretation_N9","Department","vanityMetrics","valuableMetrics","allMetrics","push","name","Metric_Name","visible","usedInDecision","executiveRequested","Executive_Requested","lastReviewed","lastUsed","notes","vanityIndicators","some","indicator","reason","dept","sort","a","b","top3","slice","length","lowValueMetrics","filter","metric","vm"],"sources":["/Users/michaelduggan/KPI-AUDIT-TOOL/src/utils/analysisUtils.js"],"sourcesContent":["// Helper function to determine why a metric is considered a vanity metric\nexport const determineVanityReason = (row) => {\n  if (row.Visible_in_Dashboard === 'Yes' && row.Used_in_Decision_Making === 'No') {\n    return \"Visible but not used in decisions\";\n  } else if (row.Interpretation_Notes?.includes('Drives vanity')) {\n    return \"Drives vanity OKRs\";\n  } else if (row.Interpretation_Notes?.includes('Used for optics only')) {\n    return \"Used for optics only\";\n  } else if (row.Interpretation_Notes?.includes('Often misinterpreted')) {\n    return \"Often misinterpreted\";\n  } else if (row.Metric_Last_Used_For_Decision === 'Never') {\n    return \"Never used for decisions\";\n  } else if (row.Last_Reviewed === 'Unknown') {\n    return \"Review status unknown\";\n  }\n  return \"Multiple issues\";\n};\n\n// Helper function to calculate a value score for metrics\nexport const calculateValueScore = (row) => {\n  let score = 0;\n  \n  // Decision making value\n  if (row.Used_in_Decision_Making === 'Yes') score += 3;\n  \n  // Recency of use in decisions\n  if (row.Metric_Last_Used_For_Decision === 'Recently') score += 3;\n  else if (row.Metric_Last_Used_For_Decision === '2 weeks ago') score += 2;\n  else if (row.Metric_Last_Used_For_Decision === 'Used in QBR') score += 1;\n  \n  // Recency of review\n  if (row.Last_Reviewed === 'This week') score += 2;\n  else if (row.Last_Reviewed === 'Last month') score += 1;\n  \n  // Quality of interpretation\n  if (row.Interpretation_Notes?.includes('Tied to real goals')) score += 3;\n  if (row.Interpretation_Notes?.includes('Frequently discussed')) score += 1;\n  if (row.Interpretation_Notes?.includes('Auto-synced from tool')) score += 1;\n  \n  return score;\n};\n\n// Helper function to identify vanity metrics and valuable metrics\nexport const analyzeMetrics = (data) => {\n  const results = {};\n  \n  // Process metrics by department\n  data.forEach(row => {\n    if (!results[row.Department]) {\n      results[row.Department] = {\n        vanityMetrics: [],\n        valuableMetrics: [],\n        allMetrics: []\n      };\n    }\n    \n    // Store all metrics\n    results[row.Department].allMetrics.push({\n      name: row.Metric_Name,\n      visible: row.Visible_in_Dashboard,\n      usedInDecision: row.Used_in_Decision_Making,\n      executiveRequested: row.Executive_Requested,\n      lastReviewed: row.Last_Reviewed,\n      lastUsed: row.Metric_Last_Used_For_Decision,\n      notes: row.Interpretation_Notes\n    });\n    \n    // Identify vanity metrics (visible but not used in decisions, or with concerning notes)\n    const vanityIndicators = [\n      row.Visible_in_Dashboard === 'Yes' && row.Used_in_Decision_Making === 'No',\n      row.Interpretation_Notes?.includes('Drives vanity'),\n      row.Interpretation_Notes?.includes('Used for optics only'),\n      row.Interpretation_Notes?.includes('Often misinterpreted'),\n      row.Metric_Last_Used_For_Decision === 'Never',\n      row.Last_Reviewed === 'Unknown'\n    ];\n    \n    if (vanityIndicators.some(indicator => indicator)) {\n      results[row.Department].vanityMetrics.push({\n        name: row.Metric_Name,\n        reason: determineVanityReason(row)\n      });\n    }\n    \n    // Calculate value score for all metrics (not just those that meet threshold)\n    const score = calculateValueScore(row);\n    \n    // Add to valuable metrics list with score\n    results[row.Department].valuableMetrics.push({\n      name: row.Metric_Name,\n      score: score\n    });\n  });\n  \n  // Sort valuable metrics by score for each department\n  for (const dept in results) {\n    results[dept].valuableMetrics.sort((a, b) => b.score - a.score);\n    \n    // Always take top 3 metrics regardless of threshold\n    results[dept].top3 = results[dept].valuableMetrics.slice(0, 3);\n    \n    // Make sure we have 3 vanity metrics for each department\n    if (results[dept].vanityMetrics.length < 3) {\n      // Add lowest scoring metrics as \"Low business impact\" metrics if needed\n      const lowValueMetrics = [...results[dept].valuableMetrics]\n        .sort((a, b) => a.score - b.score)\n        .filter(metric => \n          !results[dept].vanityMetrics.some(vm => vm.name === metric.name)\n        )\n        .slice(0, 3 - results[dept].vanityMetrics.length);\n      \n      lowValueMetrics.forEach(metric => {\n        results[dept].vanityMetrics.push({\n          name: metric.name,\n          reason: \"Low business impact\"\n        });\n      });\n    }\n  }\n  \n  return results;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}